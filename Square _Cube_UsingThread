/***************************************
 * FILE        : Experiment 11
 * DESCRIPTION : Multiple Threading
 * AUTHOR      : Melissa Manoj Thondoli
 * VERSION     : 1
 * DATE        : 28/01/22
 **********************************/


package OOPJ;
import java.util.Random;
import java.util.Queue;
import java.util.LinkedList;

class RandomThread implements Runnable{
	Queue<Integer>object;
	RandomThread(Queue<Integer>object){
		this.object=object;
	}
	public void run() {
		while(true) {
			synchronized(object) {
				while(object.size()>=1) {
					try {
						
						object.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				Random rand = new Random();
				int rand_int1 = rand.nextInt(1000);
				System.out.println("random number "+ rand_int1);
				object.add(rand_int1);
				object.notifyAll();
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
		    }
		}
	}
}

class EvenThread implements Runnable{
	Queue<Integer>object;
	EvenThread(Queue<Integer>object){
		this.object=object;
	}
	public void run() {
		while(true) {
			synchronized(object) {
				while(object.size()<1 || object.element()%2!=0) {
				
					try {
						object.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				int val = object.remove();
				System.out.println("Square "+ (val*val));
				object.notifyAll();
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}
}

class OddThread implements Runnable{
	Queue<Integer>object;
	OddThread(Queue<Integer>object){
		this.object=object;
	}
	public void run() {
		while(true) {
			synchronized (object) {
				while(object.size()<1 || object.element()%2==0) {
					try {
						object.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				int val = object.remove();
				System.out.println("Cube "+(val*val*val));
				object.notifyAll();
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
public class Experiment_11 {
	public static void main(String[] args) {
		Queue<Integer> object =  new LinkedList<Integer>();
		Thread random = new Thread(new RandomThread(object));
		Thread even = new Thread(new EvenThread(object));
		Thread odd =  new Thread(new OddThread(object));
		random.start();
		even.start();
		odd.start();
	}
}
